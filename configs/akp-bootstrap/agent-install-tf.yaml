apiVersion: tf.upbound.io/v1beta1
kind: ProviderConfig
metadata:
  name: akp-provider
spec:
  configuration: |
    terraform {
      required_providers {
        akp = {
          source = "akuity/akp"
          version = "~> 0.5"
        }
        aws = {
          source  = "hashicorp/aws"
          version = "~> 5.0"
        }
        argocd = {
          source = "oboukili/argocd"
          version = "6.0.2"
        }
      }
      backend "kubernetes" {
        secret_suffix = "xplane-demo"
        namespace         = "default"
        in_cluster_config = true
      }
    }

---

apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: akuity-agent
spec:
  providerConfigRef:
    name: akp-provider
  forProvider:
    source: Inline
    varFiles:
    - source: SecretKey
      secretKeyRef:
        key: tfvars
        name: tfvars-secret
        namespace: default
    vars:
    - key: org_name
      value: akuity # The org name in AKP
    - key: akp_instance_name
      value: xplane-demo-instance # The name of the Argo CD instance in AKP to attach the new cluster to
    - key: cluster_name
      value: xplane-demo-cluster # What to name the cluster in AKP
    module: |
      variable "admin_password" {
        type    = string
        sensitive = true
      }
      variable "api_key_id" {
        type    = string
        sensitive = true
      }
      variable "api_key_secret" {
        type    = string
        sensitive = true
      }
      variable "aws_access_key_id" {
        type    = string
        sensitive = true
      }
      variable "aws_secret_access_key" {
        type    = string
        sensitive = true
      }
      variable "org_name" {
        type    = string
      }
      variable "akp_instance_name" {
        type    = string
      }
      variable "cluster_name" {
        type    = string
      }

      # Initialize the AKP provider
      provider "akp" {
        org_name = var.org_name
        api_key_id = var.api_key_id
        api_key_secret = var.api_key_secret
      }

      # Initialize the AWS provider
      provider "aws" {
        access_key = var.aws_access_key_id
        secret_key = var.aws_secret_access_key
        region = "us-west-2"
      }

      # Initialize Argo CD Provider
      provider "argocd" {
        server_addr = "${akp_instance.example.argocd.spec.instance_spec.subdomain}.cd.akuity.cloud"
        username    = "admin"
        password    = var.admin_password
      }

      # Get EKS connection details
      data "aws_eks_cluster" "example" {
        name = "xplane-demo"
      }

      data "aws_eks_cluster_auth" "example" {
        name = "xplane-demo"
      }

      # Provision Argo CD instance
      resource "akp_instance" "example" {
        name = var.akp_instance_name
        argocd = {
          "spec" = {
            "instance_spec" = {
              "declarative_management_enabled" = true
            }
            "version" = "v2.8.0"
          }
        }
        argocd_cm = {
          data = {
            "exec.enabled" = "true"
            "ga.anonymizeusers" = "false"
            "helm.enabled" = "true"
            "kustomize.enabled" = "true"
            "server.rbac.log.enforce.enable" = "false"
            "statusbadge.enabled" = "false"
            "ui.bannerpermanent" = "false"
            "users.anonymous.enabled" = "false"
            "accounts.admin" = "login"
          }
        }
        argocd_secret = {
          type = "Opaque"
          string_data = {
            "admin.password" = bcrypt(var.admin_password)
          }
        }
      }

      # Provision and deploy a new agent
      resource "akp_cluster" "example" {
        name        = var.cluster_name
        namespace   = "akuity"
        instance_id = akp_instance.example.id
        spec = {
          data = {
            size = "small"
          }
        }

        kube_config = {
          token = data.aws_eks_cluster_auth.example.token
          host = data.aws_eks_cluster.example.endpoint
          cluster_ca_certificate = base64decode(data.aws_eks_cluster.example.certificate_authority[0].data)
        }
        lifecycle {
          ignore_changes = [
            kube_config.token,
          ]
        }
      }

      # Create Application
      resource "argocd_application" "guestbook" {
        metadata {
          name      = "guestbook"
          namespace = "argocd"
        }
        spec {
          project = "default"
          destination {
            name = akp_cluster.example.name
            namespace = "guestbook"
          }
          sync_policy {
            automated {
              prune       = true
              self_heal   = true
              allow_empty = true
            }
            sync_options = ["CreateNamespace=true"]
          }
          source {
            path = "env/dev"
            repo_url = "https://github.com/akuity/guestbook-deploy.git"
            target_revision = "HEAD"
          }
        }
      }